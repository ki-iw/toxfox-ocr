[tool.poetry]
name = "zug_toxfox"
version = "0.0.1"
description = "This is a repository to explore OCR solutions for the ToxFox application."
authors = ["Birds on Mars <info@birdsonmars.com>"]
readme = "README.md"
packages = [
  {include = "zug_toxfox"}
]

[[tool.poetry.source]]
name = "torch118"
url = "https://download.pytorch.org/whl/cu118"
priority = "explicit"

[tool.poetry.dependencies]
python = "^3.10"
python-dotenv = "^1.0.0"
sty = "^1.0.4"
ipykernel = "^6.25.1"
fastapi = "^0"
uvicorn = "^0.23"
httpx = "^0.24"
gspread = "^6.1.0"
pandas = "^2.2.2"
google-api-python-client = "^2.130.0"
tesserocr = "^2.7.0"
pillow = "^10.3.0"
pyzbar = "^0.1.9"
openpyxl = "^3.1.5"
argparse = "^1.4.0"
fuzzywuzzy = {extras = ["speedup"], version = "^0.18.0"}
numpy = "<2.0"
opencv-python = "^4.10.0.84"
easyocr = "^1.7.1"
sentence-transformers = "^3.0.1"
python-multipart = "^0.0.12"
dotmap = "^1.3.30"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pre-commit = "^3.3.3"
ipykernel = "^6.25.1"
nbstripout = "^0.6.1"
black = {extras = ["jupyter"], version = "*"}
ruff = "*"
mypy = "^1.5.0"
matplotlib = "^3.9.0"
seaborn = "^0.13.2"
segment-anything = "^1.0"
streamlit = "^1.36.0"


[tool.poetry.scripts]
zug_toxfox_cli = 'zug_toxfox.cli:main'

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "tests"
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py311']
preview = true

[tool.ruff]
target-version = "py311"
line-length = 120
fix = true
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # Use specific rule codes when ignoring type issues
    "PGH003",
    # shadowing a python builtin
    "A003",
    # Do not perform function calls in argument defaults (used by FastAPI)
    "B008"
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]

[tool.mypy]
files = ["zug_toxfox"]
show_error_codes = "True"
disable_error_code = ["import", "no-any-unimported", "func-returns-value"]
allow_untyped_defs = "True"